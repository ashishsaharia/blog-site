// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id             Int              @id @default(autoincrement())
  username       String           @unique
  name           String
  email          String           @unique
  bio            String?
  profileImage   String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?         @updatedAt

  posts          Post[]
  comments       Comment[]
  likes          Like[]
//   readingLists   ReadingList[]
  notifications  Notification[]

  followers      Follower[]       @relation("followers_follower")
  following      Follower[]       @relation("followers_following")

//   publications   Publication[]    @relation("publication_owner")

  @@index([username])
}

// -----------------------------

model Post {
  id             Int              @id @default(autoincrement())
  userId         Int
  title          String
  slug           String            @unique
  content        String
  coverImage     String?
  contentImage   String?
  readTime       Int?
//   isPublished    Boolean           @default(false)
//   publishedAt    DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  author         User              @relation(fields: [userId], references: [id],onDelete: Cascade)
  comments       Comment[]
  likes          Like[]
//   tags           PostTag[]
//   readingLists   ReadingListPost[]
//   publication    PublicationPost?

  @@index([userId])
  @@index([slug])
}

// -----------------------------

model Comment {
  id             Int              @id @default(autoincrement())
  postId         Int
  userId         Int
//   parentId       Int?
  content        String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  post           Post              @relation(fields: [postId], references: [id],onDelete: Cascade)
  author         User              @relation(fields: [userId], references: [id])
//   parent         Comment?          @relation("CommentReplies", fields: [parentId], references: [id])
//   replies        Comment[]         @relation("CommentReplies")

  @@index([postId])
}

// -----------------------------

// model Tag {
//   id             Int              @id @default(autoincrement())
//   name           String            @unique
//   description    String?

//   posts          PostTag[]

//   @@index([name])
// }

// Pivot table for many-to-many between Post and Tag

// model PostTag {
//   postId         Int
//   tagId          Int

//   post           Post  @relation(fields: [postId], references: [id])
//   tag            Tag   @relation(fields: [tagId], references: [id])

//   @@id([postId, tagId])
// }

// -----------------------------

model Like {
  id             Int              @id @default(autoincrement())
  postId         Int
  userId         Int
  count          Int              @default(1)
  createdAt      DateTime         @default(now())

  post           Post              @relation(fields: [postId], references: [id],onDelete: Cascade)
  user           User              @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId, userId])
}

// -----------------------------

model Follower {
	 id          Int      @id @default(autoincrement()) // unique numeric ID
  followerId     Int   
  followingId    Int
  createdAt      DateTime          @default(now())

  follower       User @relation("followers_follower", fields: [followerId], references: [id],onDelete: Cascade)
  following      User @relation("followers_following", fields: [followingId], references: [id],onDelete: Cascade)
@@unique([followerId, followingId]) // prevents duplicate follows
}

// -----------------------------

// model ReadingList {
//   id             Int              @id @default(autoincrement())
//   userId         Int
//   title          String
//   createdAt      DateTime          @default(now())

//   user           User              @relation(fields: [userId], references: [id])
//   posts          ReadingListPost[]
// }

// Pivot: many-to-many between ReadingList and Post

// model ReadingListPost {
//   readingListId  Int
//   postId         Int

//   readingList    ReadingList @relation(fields: [readingListId], references: [id])
//   post           Post        @relation(fields: [postId], references: [id])

//   @@id([readingListId, postId])
// }

// -----------------------------

model Notification {
  id             Int              @id @default(autoincrement())
  userId         Int
  type           String?
  message        String?
  link           String?
  isRead         Boolean           @default(false)
  createdAt      DateTime          @default(now())

  user           User              @relation(fields: [userId], references: [id])
}

// -----------------------------

// model Publication {
//   id             Int              @id @default(autoincrement())
//   name           String            @unique
//   description    String?
//   ownerId        Int?

//   owner          User?             @relation("publication_owner", fields: [ownerId], references: [id])
//   posts          PublicationPost[]
//   createdAt      DateTime          @default(now())
// }

// // Pivot: Publication â†” Post
// model PublicationPost {
//   publicationId  Int
//   postId         Int

//   publication    Publication @relation(fields: [publicationId], references: [id])
//   post           Post        @relation(fields: [postId], references: [id])

//   @@id([publicationId, postId])
// }
